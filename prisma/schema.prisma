// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model Users {
  id String @db.Char(36) @id @default(uuid())
  email String @unique
  fullname String
  username String @unique
  role Role
  photo Bytes? @db.MediumBlob
  password String
  emailValidated Boolean? @default(false)

  wallet Wallet?
  penjualan Penjualan[]

  @@map("users")
}

model Wallet {
  id_wallet Int @id @default(autoincrement())
  id_user String @db.Char(36) @unique
  balance Int @db.UnsignedInt @default(0)
  user Users @relation(fields: [id_user], references: [id], map: "fk_wallet_user", onDelete: Cascade)

  @@map("wallet")
}

model Items {
  id_item Int @db.UnsignedMediumInt @id @default(autoincrement())
  id_brand Int @db.UnsignedMediumInt
  id_category Int @db.UnsignedMediumInt
  name String
  price Int @db.UnsignedInt
  stock Int @db.UnsignedSmallInt
  rating Decimal? @db.Decimal(2,1)
  photo_item Bytes? @db.MediumBlob

  category Categories @relation(fields: [id_category], references: [id_category], map: "fk_item_category", onDelete: Cascade)
  brand Brands @relation(fields: [id_brand], references: [id_brand], map: "fk_item_brand", onDelete: Cascade)
  item_terjual Item_terjual[]
  
  @@map("items")
}

model Brands {
  id_brand Int @db.UnsignedMediumInt @id @default(autoincrement())
  name_brand String @unique
  brand_photo Bytes @db.MediumBlob
  items Items[]

  @@map("brands")
}

model Categories {
  id_category Int @db.UnsignedMediumInt @id @default(autoincrement())
  category String
  category_photo Bytes? @db.MediumBlob
  items Items[]

  @@map("categories")
}

model Penjualan {
  id_penjualan Int @id @default(autoincrement())
  id_user String @db.Char(36)
  tanggal_beli DateTime @db.Timestamp()
  status StatusJual

  item_terjual Item_terjual[]
  users Users @relation(fields: [id_user], references: [id], map: "fk_penjualan_users", onDelete: Cascade)

  @@map("penjualan")
}

enum StatusJual {
  pengemasan
  dikirim
  sampai
  diterima
}

model Item_terjual {
  id Int @id @default(autoincrement())
  id_penjualan Int 
  id_item Int @db.UnsignedMediumInt 
  quantity Int @db.UnsignedSmallInt
  price Int @db.UnsignedInt

  penjualan Penjualan @relation(fields: [id_penjualan], references: [id_penjualan], map: "fk_item_terjual_penjualan", onDelete: Cascade)
  items Items @relation(fields: [id_item], references: [id_item], map: "fk_item_terjual_item", onDelete: Cascade) 

  @@map("item_terjual")
}

model Preview {
  id Int @id @default(autoincrement())
  tipe_barang String
  nama_barang String
  image Bytes @db.MediumBlob
}